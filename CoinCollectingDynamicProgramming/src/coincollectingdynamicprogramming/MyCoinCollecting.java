/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coincollectingdynamicprogramming;

/**
 *
 * @author rivendell
 */
import java.io.BufferedReader;
import javax.swing.JFileChooser;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import javax.swing.DefaultListModel;
import javax.swing.filechooser.FileNameExtensionFilter;
       
public class MyCoinCollecting extends javax.swing.JFrame {

    /**
     * Creates new form MyCoinCollecting
     */
    public MyCoinCollecting() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("SelectFile");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Coins");

        jScrollPane2.setViewportView(jList2);

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Toplanan Para miktarı :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(27, 27, 27)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     Aşağıdaki metod matrisi ekrana yazdırma işlemi yapmaktadır,
     */
    static void print_array (int array[][]){
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j <array[i].length; j++) {
                System.out.print(array[i][j]+ "  ");
            }
            System.out.println();
         }
    }
    /* Aşağıdaki iki list model java Jform üzerinden bulunan 
       jlist elemanlarına matrisleri doldurmak için kullanıldı
    */
    DefaultListModel listmodel = new DefaultListModel();
    DefaultListModel listmodel2 = new DefaultListModel();
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        jList1.setModel(listmodel);
        jList2.setModel(listmodel2);
        BufferedReader br = null;
        File selectedFile = null;
        System.setProperty("line.delimeter", "\\");
        JFileChooser chooser = new JFileChooser();
        
         FileNameExtensionFilter filter = new FileNameExtensionFilter("Text/Java files", "txt", "java");
         chooser.setFileFilter(filter);
     
        //chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        //chooser.setCurrentDirectory(new File("C:\\Users\\rivendell\\Desktop\\FSM\\algoritma analizi ve tasarımında ileri teknikler\\odev"));

        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
             selectedFile = chooser.getSelectedFile();                     
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());            
        }
        try {
            
            String line;
            int numLine = 0;
           
            br = new BufferedReader(new FileReader(selectedFile));
            int index = 0;
            while ((line = br.readLine())!= null){
                //System.out.println(line);
                index++; // öncelikle dosyanın kaç satır veriden olştuğunu bulmak için 
                        // bu while döngüsü içersinde satır sayısı bulunuyor.
            }
            br.close();            
            br = new BufferedReader(new FileReader(selectedFile));
            // satır sayısı kadar elemanlı bir string array olulturuluyor
            String [] sCurrentLine =new String[index];
            index = 0;          
            System.out.println(sCurrentLine[0]);
            // dosyadan veriler satır satır tekrar okunarak
            // satır sayısı kadar oluşturulan string array e atılıyor.
            while ((line = br.readLine())!= null){
                sCurrentLine[index] = line;                
                index++;
            }            
            String [] strArray = sCurrentLine[0].split("\t");
            // her bir satırdaki veriler birbirinden tab(\t) ile ayrıldığı için
            // her bir satırdaki veriyi bir birinden ayırmak ve 
            // her bir veriyi mxn elemanlı bir dizinin bir elemanına atamak için,
            // coins isimli bir 3 boyutlu matrix olşturuldu
            int coins[][] = new int[index][strArray.length];
            for (int i = 0; i < index; i++){                
                String [] strArray1 = sCurrentLine[i].split("\t");
                String str = "";
                for (int j = 0; j < strArray1.length; j++){
                    // dosyaadan okunan her bir eleman string olarak alındı
                    // string olarak alınan her bir elemanı integer' a çevirip
                    // coins matrisini oluşturma işlemi yapılıyor.
                    coins[i][j] = Integer.parseInt(strArray1[j]);
                    // coins matrisini ekranda bir jlist elemanında göstermek için
                    // her bir satırı bir string e atıyoruz,
                    str += "    "+coins[i][j]; 
                }
                // matrisin her bir satırını listeye ekliyoruz ve bir sonraki satır için
                // string i sıfırlıyoruz.                
                listmodel.addElement(str);
                str = "";                
            }
            //System.out.println("/*coins array yazılıyor...*/");
            //print_array(coins);           
             int row = coins.length, column = 6;  
             // maliyet matrisi tanımlanıyor.
             int[][] F = new int[row][column];               
             
            F[0][0] = coins[0][0];               
            /*for(int j = 1; j < column; j++){
                // aşağıdaki if kontrolü Coins collecting robot için kısıtları kontrol ediyor
                // öncelikle robotun herhangi bri hücreye girip giremediğini kontrol etmek için
                // o hücrenin yasak olup olmadığına bakıyor eğer değer -255 ise 
                // robot o hücreye uğrayamıyor veya 
                // robotun o zamana kadar topladığı değer eğer geldiği hücredeki değerden,
                //küçük ise o hücreye uğramasın kontrolü yapılmaktadır.
                if((coins[0][j] == -255) || (F[0][j-1] + coins[0][j] < 0 ))
                    break;
                 F[0][j] = F[0][j-1] + coins[0][j]; 
            } 
            for(int i = 1; i < row; i++){
                if ((coins[i][0] == -255) || (F[i-1][0] + coins[i][0]) < 0)
                    break;
                  F[i][0] = F[i-1][0] + coins[i][0]; 
            }*/
            System.out.println("/*Fonksiyon array yazırılıyor....*/");
          //  print_array(F);
            // F(n) hesaplanıyor...
            for( int i = 1; i < row; i++) 
            {                   
                for( int j = 1; j < column; j++) 
                { 
                // aşağıdaki if kontrolü Coins collecting robot için kısıtları kontrol ediyor
                // öncelikle robotun herhangi bri hücreye girip giremediğini kontrol etmek için
                // o hücrenin yasak olup olmadığına bakıyor eğer değer -255 ise 
                // robot o hücreye uğrayamıyor veya 
                // robotun o zamana kadar topladığı değer eğer geldiği hücredeki değerden,
                //küçük ise o hücreye uğramasın kontrolü yapılmaktadır.
                    if((coins[i][j] != -255) || (F[i-1][j-1] + coins[i][j] < 0 ))
                    {                        
                     int value  = Math.max(F[i][j-1], F[i-1][j]) + coins[i][j];
                     if ((value + coins[i][j] >= 0))
                       F[i][j] = value; 
                    }
                      
                } 
            } 
            System.out.println("/*Fonksiyon sonucu yazırılıyor....*/");
            print_array(F);
            // path hesaplanıyor....
            System.out.println("path matisi:................");
            // path hesabında matris üzerine robotun gittiği yol üzerine 
            // P harfi eklemek için Maliyet matrisini String e çeviriyoruz
            int i = row-1, j = column - 1; 
            String path[][] = new String[row][column];
            for (int k = 0; k < row; k++) {
                for (int l = 0; l < column; l++) {
                    path[k][l] = String.valueOf(F[k][l]);                    
                }   
            }               
          
          path[0][0] = "P";             
          while(i >0 && j > 0)
          {
            // aşağıdaki if kontrolünde robotun bitiş noktasından 
            // başlangıç noktasına doğru geriye giderek, geldiği yolun 
            //  belirlenmesi işlemini yapıyoruz,
            // bir önceki satır ve o andaki sütun toplamı maliyet matrisi ve 
            // coins matrisindeki değer ile eşit ise yol matrisindeki o anki noktaya 
            // P harfini ekle.
            if( F[i][j] == F[i-1][j] + coins[i][j])
            {              
              path[i-1][j] = "P";             
              i--;
            }
            else
            {            
             path[i][j-1] = "P";           
             j--;
            }
          }
          // toplanan değer maliyet matrisinin son satır son sütunundan
          //alınıyor
          System.out.printf("Toplanan para miktarı %s \n", F[row-1][column-1]);
          jLabel2.setText("Toplanan Para miktarı :"+F[row-1][column-1]);
          
         
          // path matriisi...
          for (int k = 0; k < row; k++) {
            // oluşturulan path matrisini ekrandaki jlist2 elemanına 
            // yazdırma işlemi yapıyoruz
              String str = "";
                for (int l = 0; l < column; l++) {
                   str +="  "+path[k][l];
                }                
                listmodel2.addElement(str);
                str = "";
          }
           
            } catch (IOException e) {
                    e.printStackTrace();
            } finally {
                    try {
                            if (br != null)br.close();
                         //   listmodel.clear();
                    } catch (IOException ex) {
                            ex.printStackTrace();
                    }
            }
         
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        listmodel.clear();
        listmodel2.clear();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyCoinCollecting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyCoinCollecting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyCoinCollecting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyCoinCollecting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyCoinCollecting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
